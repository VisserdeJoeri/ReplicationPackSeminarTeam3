# This dataset is for combining cps and acs dataset
library(tidyverse)
library(haven)
library(readr)
# Load the datasets
cps_path <- "/Users/friso/Documents/Stata/Results/processed_all_races.csv"
acs_path <- "/Users/friso/Documents/Stata/extrapolated_inst_pops_2000_2005.dta"
cps_dataset <- read_csv(cps_path)
acs_dataset <- read_dta(acs_path)
output_file <- "/Users/friso/Documents/Stata/Results/tpop_0021.csv"
# Step 1: Prep the ACS dataset
# Renaming some columns to match the CPS dataset
acs_dataset <- acs_dataset %>%
rename(race = wbho, age = age_gp) %>%
select(-inst_2000, -inst_2006) %>%
mutate(
# Convert numeric ages into age groups
age = case_when(
age == 25 ~ "25-29",
age == 30 ~ "30-34",
age == 35 ~ "35-39",
age == 40 ~ "40-44",
age == 45 ~ "45-49",
age == 50 ~ "50-54",
age == 55 ~ "55-59",
age == 60 ~ "60-64",
age == 65 ~ "65-69",
age == 70 ~ "70-74",
TRUE ~ as.character(age)
)
) %>%
filter(age != "70-74", race != 0, sex != 0)  # filter out rows we don't need
# Step 2: Combine CPS with ACS
# We rename and scale tpop_2 from CPS so it's in whole persons
cps_dataset <- cps_dataset %>%
rename(non_inst = tpop_2) %>%
mutate(non_inst = non_inst * 1000)
# This dataset is for combining cps and acs dataset
library(tidyverse)
library(haven)
library(readr)
# Load the datasets
cps_path <- "/Users/friso/Documents/Stata/Results/processed_all_races.csv"
acs_path <- "/Users/friso/Documents/Stata/extrapolated_inst_pops_2000_2005.dta"
old_cps_dataset <- read_csv(cps_path)
old_acs_dataset <- read_dta(acs_path)
output_file <- "/Users/friso/Documents/Stata/Results/tpop_0021.csv"
# Step 1: Prep the ACS dataset
# Renaming some columns to match the CPS dataset
acs_dataset <- old_acs_dataset %>%
rename(race = wbho, age = age_gp) %>%
select(-inst_2000, -inst_2006) %>%
mutate(
# Convert numeric ages into age groups
age = case_when(
age == 25 ~ "25-29",
age == 30 ~ "30-34",
age == 35 ~ "35-39",
age == 40 ~ "40-44",
age == 45 ~ "45-49",
age == 50 ~ "50-54",
age == 55 ~ "55-59",
age == 60 ~ "60-64",
age == 65 ~ "65-69",
age == 70 ~ "70-74",
TRUE ~ as.character(age)
)
) %>%
filter(age != "70-74", race != 0, sex != 0)  # filter out rows we don't need
# Step 2: Combine CPS with ACS
# We rename and scale tpop_2 from CPS so it's in whole persons
cps_dataset <- old_cps_dataset %>%
rename(non_inst = tpop_2) %>%
mutate(non_inst = non_inst * 1000)
View(old_cps_dataset)
View(cps_dataset)
# This dataset is for combining cps and acs dataset
library(tidyverse)
library(haven)
library(readr)
# Load the datasets
cps_path <- "/Users/friso/Documents/Stata/Results/processed_all_races.csv"
acs_path <- "/Users/friso/Documents/Stata/extrapolated_inst_pops_2000_2005.dta"
old_cps_dataset <- read_csv(cps_path)
old_acs_dataset <- read_dta(acs_path)
output_file <- "/Users/friso/Documents/Stata/Results/tpop_0021.csv"
# Step 1: Prep the ACS dataset
# Renaming some columns to match the CPS dataset
acs_dataset <- old_acs_dataset %>%
rename(race = wbho, age = age_gp) %>%
select(-inst_2000, -inst_2006) %>%
mutate(
# Convert numeric ages into age groups
age = case_when(
age == 25 ~ "25-29",
age == 30 ~ "30-34",
age == 35 ~ "35-39",
age == 40 ~ "40-44",
age == 45 ~ "45-49",
age == 50 ~ "50-54",
age == 55 ~ "55-59",
age == 60 ~ "60-64",
age == 65 ~ "65-69",
age == 70 ~ "70-74",
TRUE ~ as.character(age)
)
) %>%
filter(age != "70-74", race != 0, sex != 0)  # filter out rows we don't need
# Step 2: Combine CPS with ACS
# We rename and scale tpop_2 from CPS so it's in whole persons
cps_dataset <- old_cps_dataset
# Merge the two datasets based on shared keys
combined_dataset <- left_join(
cps_dataset,
acs_dataset,
by = c("year", "age", "race", "sex", "edclass")
)
# Step 3: Calculate institutionalization rates and fill missing years
# Compute inst_rate for 2000-2018
combined_dataset <- combined_dataset %>%
mutate(
inst_rate = if_else(
year <= 2018,
inst / (inst + non_inst),
NA_real_
)
)
View(combined_dataset)
# Load required libraries
library(readxl)
library(tidyr)
library(dplyr)
library(stringr)
# Define paths for subprograms
subprogram_path <- "/Users/Stata/b/cps_aggregate_code/"
# Source subprograms
source(paste0(subprogram_path, "load_20132021_cpsfiles.R"))
source(paste0(subprogram_path, "compute_cpsagg_race_4.R"))
source(paste0(subprogram_path, "cps_age_transformer.R"))
# Define parent directory and subfolders for each race
base_folder_xslx <- "/Users/Stata/data/raw/cps_aggregate/2013_2021_xslx_2/"
race_folders <- c("race_1" = 1, "race_2" = 2, "race_3" = 3, "race_0" = 0)  # Race 0 is total
# Output file
list.files(file.path(base_folder_xslx, "race_1"))
list.files("/Users/Stata/data/raw/cps_aggregate/race_1", pattern = "\\.xls[x]?$", full.names = TRUE)
output_file <- "/Users/friso/Documents/Stata/Results/processed_all_races.csv"
#Check
print(file.exists(paste0(subprogram_path, "load_20132021_cpsfiles.R")))
# Load and process all files
final_data <- load_20132021_cpsfiles(base_folder_xslx, race_folders)
# Load required libraries
library(readxl)
library(tidyr)
library(dplyr)
library(stringr)
# Define paths for subprograms
subprogram_path <- "/Users/Stata/b/cps_aggregate_code/"
# Source subprograms
source(paste0(subprogram_path, "load_20132021_cpsfiles.R"))
source(paste0(subprogram_path, "compute_cpsagg_race_4.R"))
source(paste0(subprogram_path, "cps_age_transformer.R"))
# Define parent directory and subfolders for each race
base_folder_xslx <- "/Users/Stata/data/raw/cps_aggregate/2013_2021_xslx_2/"
race_folders <- c("race_1" = 1, "race_2" = 2, "race_3" = 3, "race_0" = 0)  # Race 0 is total
# Output file
list.files(file.path(base_folder_xslx, "race_1"))
list.files("/Users/Stata/data/raw/cps_aggregate/race_1", pattern = "\\.xls[x]?$", full.names = TRUE)
output_file <- "/Users/friso/Documents/Stata/Results/processed_all_races.csv"
#Check
print(file.exists(paste0(subprogram_path, "load_20132021_cpsfiles.R")))
# Load and process all files
final_data <- load_20132021_cpsfiles(base_folder_xslx, race_folders)
# final_data <- load_20072012_cpsfiles(base_folder_xls, race_folders)
#Compute and append Race 4 data
final_data <- compute_cpsagg_race_4(final_data)
# Last checks: Ensure `tpop_2` is non-negative and remove Race 0
final_data <- final_data %>% mutate(tpop_2 = pmax(0, tpop_2)) %>% filter(race != 0)
# Transform age format to match `mortality_filtered`
final_data$age <- sapply(final_data$age, cps_age_transformer)
# Load required libraries
library(readxl)
library(tidyr)
library(dplyr)
library(stringr)
# Define paths for subprograms
subprogram_path <- "/Users/Stata/b/cps_aggregate_code/"
# Source subprograms
source(paste0(subprogram_path, "load_20132021_cpsfiles.R"))
source(paste0(subprogram_path, "compute_cpsagg_race_4.R"))
# Define parent directory and subfolders for each race
base_folder_xslx <- "/Users/Stata/data/raw/cps_aggregate/2013_2021_xslx_2/"
race_folders <- c("race_1" = 1, "race_2" = 2, "race_3" = 3, "race_0" = 0)  # Race 0 is total
# Output file
list.files(file.path(base_folder_xslx, "race_1"))
list.files("/Users/Stata/data/raw/cps_aggregate/race_1", pattern = "\\.xls[x]?$", full.names = TRUE)
output_file <- "/Users/friso/Documents/Stata/Results/processed_all_races.csv"
#Check
print(file.exists(paste0(subprogram_path, "load_20132021_cpsfiles.R")))
# Load and process all files
final_data <- load_20132021_cpsfiles(base_folder_xslx, race_folders)
# final_data <- load_20072012_cpsfiles(base_folder_xls, race_folders)
#Compute and append Race 4 data
final_data <- compute_cpsagg_race_4(final_data)
# Last checks: Ensure `tpop_2` is non-negative and remove Race 0
final_data <- final_data %>% mutate(tpop_2 = pmax(0, tpop_2)) %>% filter(race != 0)
# Save the processed CSV file
write.csv(final_data, output_file, row.names = FALSE)
print(paste("Merged processed file saved as:", output_file))
View(combined_dataset)
library(dplyr)
library(ggplot2)
library(broom)
# Filter to known data
inst_known <- combined_dataset %>%
filter(year <= 2018)
# 1. Calculate per-group trend via linear regression
group_trends <- inst_known %>%
group_by(race, sex, age, edclass) %>%
do({
model = lm(inst_rate ~ year, data = .)
tidy_model = broom::tidy(model)
data.frame(
slope = tidy_model$estimate[tidy_model$term == "year"],
p_value = tidy_model$p.value[tidy_model$term == "year"],
sd_inst_rate = sd(.$inst_rate, na.rm = TRUE)
)
}) %>%
ungroup()
# 2. Summary: how many show significant trends?
summary_trend = group_trends %>%
summarise(
n_groups = n(),
n_positive_trend = sum(slope > 0 & p_value < 0.05),
n_negative_trend = sum(slope < 0 & p_value < 0.05),
n_flat = sum(p_value >= 0.05)
)
print(summary_trend)
View(summary_trend)
View(group_trends)
library(dplyr)
# Step 1: For t = 2000–2018, create lagged inst_rate (from t-1)
lagged_rates <- combined_dataset %>%
filter(year %in% 2000:2018) %>%
select(year, race, sex, age, edclass, inst_rate_lag = inst_rate) %>%
mutate(year = year + 1)  # So 2000 values become lag for 2001
# Step 2: Join lagged rates to t (2001–2018)
compare_inst <- combined_dataset %>%
filter(year %in% 2001:2018) %>%
left_join(lagged_rates, by = c("year", "race", "sex", "age", "edclass")) %>%
mutate(
total_pop = inst.x + non_inst,
inst_hat = inst_rate_lag * total_pop,
abs_diff = abs(inst.x - inst_hat),
rel_error = abs_diff / (inst.x + 1e-6)  # Avoid division by zero
)
# Step 3: Summarize errors
summary_errors <- compare_inst %>%
summarise(
mean_abs_error = mean(abs_diff, na.rm = TRUE),
mean_rel_error = mean(rel_error, na.rm = TRUE),
median_rel_error = median(rel_error, na.rm = TRUE),
max_rel_error = max(rel_error, na.rm = TRUE)
)
print(summary_errors)
View(summary_errors)
View(compare_inst)
library(dplyr)
library(ggplot2)
# Step 1: Create lagged inst_rate from year t-1
lagged_rates <- combined_dataset %>%
filter(year %in% 2000:2018) %>%
select(year, race, sex, age, edclass, inst_rate_lag = inst_rate) %>%
mutate(year = year + 1)
# Step 2: Join and compute constructed total vs. actual total
total_diff_data <- combined_dataset %>%
filter(year %in% 2001:2018) %>%
left_join(lagged_rates, by = c("year", "race", "sex", "age", "edclass")) %>%
mutate(
inst_hat = inst_rate_lag * (inst.x + non_inst),
total_actual = inst.x + non_inst,
total_constructed = inst_hat + non_inst,
perc_diff_total = 100 * (total_constructed - total_actual) / total_actual
)
# Step 3: Plot percentage difference
ggplot(total_diff_data, aes(x = factor(year), y = perc_diff_total)) +
geom_boxplot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Percentual Difference in Total Population: Constructed vs Actual",
subtitle = "Constructed uses inst_rate from year t-1",
x = "Year",
y = "% Difference"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
# Step 1: Create lagged inst_rate from year t-1, only for races 1 & 2
lagged_rates <- combined_dataset %>%
filter(year %in% 2000:2018, race %in% c(1, 2)) %>%
select(year, race, sex, age, edclass, inst_rate_lag = inst_rate) %>%
mutate(year = year + 1)
# Step 2: Join and compute constructed vs. actual total population
total_diff_data <- combined_dataset %>%
filter(year %in% 2001:2018, race %in% c(1, 2)) %>%
left_join(lagged_rates, by = c("year", "race", "sex", "age", "edclass")) %>%
mutate(
inst_hat = inst_rate_lag * (inst.x + non_inst),
total_actual = inst.x + non_inst,
total_constructed = inst_hat + non_inst,
perc_diff_total = 100 * (total_constructed - total_actual) / total_actual
)
# Step 3: Plot percentage difference
ggplot(total_diff_data, aes(x = factor(year), y = perc_diff_total)) +
geom_boxplot() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Percentual Difference in Total Population: Constructed vs Actual (Race 1 & 2)",
subtitle = "Constructed uses inst_rate from year t-1",
x = "Year",
y = "% Difference"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
